-- vim:set ft=lua:
--
-- Sample LUA start configuration for NVMe client examples.
--
-- In order to execute this example on qemu a disk file needs to be
-- created first and then added to QEMU using the following options:
--
-- -drive if=none,file=<filename>,format=raw,id=D1 -device nvme,drive=D1,serial=1234

local t = require("rom/test_env");

local L4 = require("L4");

local l = L4.default_loader;

-- channel between io and nvme driver
local io_bus = l:new_channel();
-- factory channel to nvme driver for connecting new clients
-- (unused in this example)
local nvme_bus = l:new_channel();
-- channel between nvme driver and client
local nvmecl1 = l:new_channel();

local nvme_io = " rom/nvme.io"
if L4.Info.arch() == "arm" or L4.Info.arch() == "arm64" then
  -- NVMe device attached to PCIe ECAM bridge
  nvme_io = " rom/pcie-ecam.io"..nvme_io
end

-- Start io, used for access to hardware resources.
-- A sample io configuration for the nvme driver can be found in nvme.io.
l:start(
  {
    caps =
      {
        nvmedrv = io_bus:svr(),
        icu     = L4.Env.icu,
        iommu   = L4.Env.iommu,
        sigma0  = L4.cast(L4.Proto.Factory, L4.Env.sigma0):create(L4.Proto.Sigma0),
      },
    log  = { "IO", "y" },
  },
  "rom/io"..nvme_io);

-- Start the nvme driver server. The client is configured staticly.
l:start(
  {
    caps =
      {
        vbus = io_bus,
        svr = nvme_bus:svr(),
        -- Create a communication channel to the client.
        cl1 = nvmecl1:svr()
      },
    log      = { "nvme", "g" },
  },
  "rom/nvme-drv --client cl1 --device 88E59675-4DC8-469A-98E4-B7B021DC7FBE --ds-max 5");

-- Start the example client
l:start(
  {
    caps =
      {
        -- Create a communication channel to the server.
        -- The example expects this to be called 'dsk'.
        dsk = nvmecl1
      },
    log      = { "test", "r" },
  },
  "rom/" .. t.TEST_PROG); -- "rom/nvme-md5-sync" or "rom/nvme-md5-async"
